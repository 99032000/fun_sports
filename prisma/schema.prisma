generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model user {
  id                String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email             String           @unique
  name              String?
  phone             String?          @unique
  active            Boolean          @default(true)
  wechatId          String?
  created_at        DateTime         @default(now())
  updated_at        DateTime         @default(now()) @updatedAt
  max_orgianization Int              @default(1)
  hobby             hobby[]
  Organization      organization[]
  Social_booking    social_booking[]
  Social_events     social_event[]
}

model organization {
  id            Int            @id @default(autoincrement())
  name          String         @unique
  wechatId      String
  phone         String?
  userId        String         @db.Uuid
  sports_typeId Int
  is_verified   Boolean        @default(false)
  description   String         @default("")
  avatar_url    String?
  sports_type   sports_type    @relation(fields: [sports_typeId], references: [id])
  owner         user           @relation(fields: [userId], references: [id])
  social_event  social_event[]
}

model social_event {
  id             Int              @id @default(autoincrement())
  name           String
  address        String
  venue_name     String?
  date           DateTime         @db.Timestamptz(0)
  ownerId        String           @db.Uuid
  booking_groups Json
  created_at     DateTime         @default(now())
  updated_at     DateTime         @default(now()) @updatedAt
  sports_level   String?
  sports_typeId  Int
  is_template    Boolean          @default(false)
  organizationId Int?
  fee            Float?           @default(0)
  description    String?
  images_url     String[]         @default([])
  is_private     Boolean          @default(false)
  Social_booking social_booking[]
  organization   organization?    @relation(fields: [organizationId], references: [id])
  owner          user             @relation(fields: [ownerId], references: [id])
  sports_type    sports_type      @relation(fields: [sports_typeId], references: [id])
}

model social_booking {
  id                Int          @id @default(autoincrement())
  created_at        DateTime     @default(now())
  updated_at        DateTime     @default(now()) @updatedAt
  social_eventId    Int
  userId            String       @db.Uuid
  booking_info      Json
  is_Paid           Boolean      @default(false)
  paidAmount        Float?
  payment_image_url String[]     @default([])
  social_event      social_event @relation(fields: [social_eventId], references: [id], onUpdate: NoAction)
  user              user         @relation(fields: [userId], references: [id], onUpdate: NoAction)
}

model payments {
  id    Int     @id @default(autoincrement())
  type  String  @unique
  image String?
}

model sports_type {
  id           Int            @id @default(autoincrement())
  name         String         @unique
  created_at   DateTime       @default(now())
  updated_at   DateTime       @default(now()) @updatedAt
  hobby        hobby[]
  organization organization[]
  social_event social_event[]
}

model hobby {
  id            Int         @id @default(autoincrement())
  sports_typeId Int
  userId        String      @db.Uuid
  level         Int         @default(0)
  sports_type   sports_type @relation(fields: [sports_typeId], references: [id])
  user          user        @relation(fields: [userId], references: [id])

  @@unique([sports_typeId, userId])
}
