generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model user {
  id             String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email          String           @unique
  name           String?
  phone          String?          @unique
  active         Boolean          @default(true)
  wechatId       String?
  created_at     DateTime         @default(now())
  updated_at     DateTime         @default(now()) @updatedAt
  Organization   organization[]
  Social_booking social_booking[]
  Social_events  social_event[]
  hobby          hobby[]
}

model organization {
  id            Int         @id @default(autoincrement())
  name          String      @unique
  wechatId      String
  phone         String?     @unique
  userId        String      @db.Uuid
  sports_typeId Int
  sports_type   sports_type @relation(fields: [sports_typeId], references: [id])
  owner         user        @relation(fields: [userId], references: [id])
}

model social_event {
  id             Int              @id @default(autoincrement())
  name           String
  address        String
  venue_name     String?
  date           DateTime         @db.Timestamp(0)
  ownerId        String           @db.Uuid
  booking_groups Json?
  created_at     DateTime         @default(now())
  updated_at     DateTime         @default(now()) @updatedAt
  sports_level   String?
  sports_typeId  Int
  Social_booking social_booking[]
  owner          user             @relation(fields: [ownerId], references: [id])
  sports_type    sports_type      @relation(fields: [sports_typeId], references: [id])
  is_template    Boolean          @default(false)
}

model social_booking {
  id              Int          @id @default(autoincrement())
  created_at      DateTime     @default(now())
  updated_at      DateTime     @default(now()) @updatedAt
  social_eventsId Int
  userId          String       @db.Uuid
  booking_info    Json
  social_events   social_event @relation(fields: [social_eventsId], references: [id])
  user            user         @relation(fields: [userId], references: [id])
}

model payments {
  id    Int     @id @default(autoincrement())
  type  String  @unique
  image String?
}

model sports_type {
  id           Int            @id @default(autoincrement())
  name         String         @unique
  created_at   DateTime       @default(now())
  updated_at   DateTime       @default(now()) @updatedAt
  organization organization[]
  social_event social_event[]
  hobby        hobby[]
}

model hobby {
  id            Int         @id @default(autoincrement())
  sports_type   sports_type @relation(fields: [sports_typeId], references: [id])
  sports_typeId Int
  user          user        @relation(fields: [userId], references: [id])
  userId        String      @db.Uuid
  level         Int         @default(0) 
  @@unique([sports_typeId,userId])
}
